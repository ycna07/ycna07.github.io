[{"title":"Test","path":"/2024/03/26/Test-0/","content":"Test:Hello_World!"},{"path":"/2024/03/25/CTF/BUUCTF_新年快乐 WriteUp/","content":"下载后直接运行，提示输入flag，输入2233，wrong。DIE查exe，发现32位，加upx壳![[Pasted image 20240306202137.png]] 使用PEID插件脱壳失败（10年前的老东西不管用了），查阅后找到工具(可以手动脱壳，明天补上吧)，脱壳后拖入ida。![[Pasted image 20240306202251.png]]![[Pasted image 20240306202539.png]] shift+f12后没有发现类似flag的东西 ![[Pasted image 20240306202524.png]] 继续看伪代码，得知str2即为flag，直接提交flag{HappyNewYear!}，成功。 总结：新年快乐主要是有壳，所以脱壳过程很重要 BUUCTF_Xor WriteUp下载后直接运行![[Pasted image 20240306202847.png]] emmm，好吧 DIE查壳 ![[Pasted image 20240306202923.png]] 64位ida打开![[Pasted image 20240306203030.png]]看到global可能是flag直接点击![[Pasted image 20240306203150.png]]一脸懵🫥🫥🫥 shift+f12查找![[Pasted image 20240306203319.png]]没有相关信息，查阅WPBuucft-Reverse-xor 题解&amp;思路总结_buuctf reverse题解-CSDN博客 原来题目信息是异或运算（其实看伪代码也能知道，然鹅某人显然着急了）shift+E导出十六进制数据于是仿照WP编写解密脚本，不会py只能c了![[Pasted image 20240306205909.png]]提交发现不对，emmmm，继续查WP发现数据不一样这是我的![[Pasted image 20240306210004.png]] ![[Pasted image 20240306210024.png]]这是前辈的？？？变量名字也一样，试一下别的方法，直接点击变量也不能找到这个变量的数据，emmmm，好吧复制数据代入程序flag{QianQiuWanDai_YiTongJiangHu}提交。 ![[Pasted image 20240306210216.png]]好折磨😭😭😭 BUUCTF_reverse_3 WriteUp直接运行![[Pasted image 20240306210902.png]] 拖入DIE![[Pasted image 20240306210922.png]] 拖入32ida![[Pasted image 20240306212108.png]] 看一下str2![[Pasted image 20240306212128.png]]一脸懵，查阅WPBUUCTF_reverse_3_buuctf reverse3-CSDN博客（原来我有个不懂的函数…，还是太着急了吗，还是不太自信呢）分析24行函数，好吧不用分析了，我已经看到WP里的base64解码。解开处理得到e3nifIH9b_C@n@dH，后在网站上代入数据得{i_l0ve_you}。提交成功 总结：1.不要老是看WP，先把不懂的查完。2.多熟悉base64等编码特征，以免错失信息。"},{"path":"/2024/03/25/CTF/BUUCTF_不一样的flag/","content":"DIE查出32位无壳，拖入ida![[Pasted image 20240307153034.png]] 看到v3带有可疑字符串，分析伪代码，然鹅并没有什么用![[Pasted image 20240307153153.png]] 直接运行程序发现可以1，2反复输入但输入3，4规律未知。 到这里卡住了。于是查阅WPBUUCTF Reverse 不一样的flag_ctf buu reverse不一样的flag-CSDN博客 呵呵，看完以后明白了up，down的提示，然鹅以5分割迷宫有点考验眼力了。![[Pasted image 20240307153535.png]]得到迷宫后可以直接走出222441144222打包提交。 总结：1.出现*#之类字符串加上up，down很可能是走迷宫2.迷宫寻找考验眼力，但一般可以分割为正方形。3.迷宫代码可以熟悉一下，与算法有关，如果算法好一点应该能直接看出来迷宫。2024.3.7"},{"path":"/2024/03/25/CTF/BUUCTF_SimpleRev/","content":"下载后打上exe，查程序发现是64位ELF，拖入ida。稍微看一下，可以发现Decry函数比较重要，进入。![[Pasted image 20240307161825.png]]分析一下，估计有点麻烦，按照代码分析后转换大小写，得到错误答案，emmmm，查看WP。BUUCTF 逆向工程(reverse)之SimpleRev_buuctf simplerev-CSDN博客BUUCTF SimpleRev（涉及大小端序存储的问题）_simplerev buuctf大端序-CSDN博客 然后开始写脚本；，，，实在绷不住看一眼前辈的，emmm好吧全是py"},{"path":"/2024/03/25/CTF/BUUCTF_Hello Word/","content":"下载附件后发现为apk文件，直接使用jadx打开![[Pasted image 20240307084629.png]]反汇编后，进入main函数，看到flag，直接提交成功。使用jeb打开![[Pasted image 20240307090302.png]]暂时看不懂"},{"path":"/2024/03/25/CTF/BUUCTF_lucky_guy/","content":"64位ELF程序，使用ida打开后找到getflag函数。![[Pasted image 20240308142751.png]]flag由f1与f2连接，显然f2数据并不正常，于是返回汇编看代码twst![[Pasted image 20240306174247.png]]![[Pasted image 20240308142928.png]]看到了get_flag函数,查了发行是字节偏移，然而没有别的看得懂的。查阅WP[BUUCTF]REVERSE——[GXYCTF2019]luck_guy_buuctf reverse [gxyctf2019]luck_guy-CSDN博客emmm，根本没有往后看捏，更别说猜到f2执行了case5。剩下的和SimpleRev完全一样。于是写了脚本，拿下flag。 总结：1.看懂汇编真的重要，好歹知道自己找错了。2.合适的时候完全可以猜一下处理过程。"},{"path":"/2024/03/25/CTF/BUUCTF-easyre Writeup/","content":"![[Pasted image 20240306174247.png]]下载附件解压得到easyre.exe(补图) ![[Pasted image 20240306174544.png]]直接运行没有反应，查阅WP……拖入ida打开（其实先用了peid查壳发现没有壳又用了DIE，才确定可以拖入ida，一开始有点不敢确定没壳😭😭） 补图![[Pasted image 20240306183419.png]]![[屏幕截图 2024-03-05 201516.png]]直接看到flag提交显示成功； BUUCTF_reverse_1 WriteUp下载得到附件 ![[Pasted image 20240306174926.png]]拖入DIE查壳（补图）![[Pasted image 20240306183640.png]]64位ida打开看到main函数流程图里已经有flag了![[屏幕截图 2024-03-05 202733.png]]直接提交，失败，继续分析；好吧有点灰心了，看一眼前辈WP知道这是没有经过程序处理的原始数据补上反汇编后流程![[屏幕截图 2024-03-05 203312.png]]之前用了x64dbg打开但是不会用（ 看到WP里可以写注释，试一下 ida伪代码分析![[Pasted image 20240306191227.png]]（原来R可以把int转换char)把原来的flag中o替换为0，flag{hell0_w0rld}，提交，成功。 BUUCTF_reverse2 WriteUp打开DIE查看程序位数![[Pasted image 20240306192240.png]]无壳，用64位ida打开![[屏幕截图 2024-03-05 203455.png]]F5生成伪代码![[Pasted image 20240306192440.png]]可以看到输入与s2对比先看看伪代码![[Pasted image 20240306193253.png]]知道了怎么处理原始flag，现在应该可以找一找了直接汇编界面没有找到，查阅WP[BUUCTF]REVERSE——reverse2_hacking_for_fun-CSDN博客得知使用shift+f12快速查找字符串（string）同样翻一遍过去，得原始hacking_for_fun}![[Pasted image 20240306193616.png]] 替换得flag{hack1ng_fo1_fun}，提交成功 BUUCTF_内涵的软件WriteUp阅读说明后运行exe![[屏幕截图 2024-03-05 204534.png]] 按下y得知可以使用OD或者IDA查看![[Pasted image 20240306194639.png]] DIE查程序![[Pasted image 20240306194341.png]] 32位IDA打开![[Pasted image 20240306194901.png]] 完全看不懂，查阅WPBuuctf-Reverse-内涵的软件 题解&amp;思路总结_buuctf 内涵的软件-CSDN博客 按照WP找到main函数，发现双击不能查看下一步，原来是因为在viewA找的，点击f5看到main伪代码![[Pasted image 20240306195646.png]]![[屏幕截图 2024-03-06 170022.png]]看到类似flag的东西，直接复制提交，成功 看到前辈的总结![[Pasted image 20240306195904.png]]才发现自己前面没有任何总结w(ﾟДﾟ)w。 总结：1.R键转char，E，H转int&#x2F;hex。2.shift+E导出数据，shift+f12查找字符串。3-5到此结束"},{"title":"Hello,World 你好，世界","path":"/2024/03/25/Hello-World-你好，世界/","content":"Hello!!! 图片显示正常","tags":["test"]},{"title":"Hello World","path":"/2024/03/25/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment"},{"path":"/friends/index.html","content":"menu_id: frinedstitle: friends"}]